<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Camera Viewer</title>

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      .main {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
      }

      #log-container {
        width: 600px;
        height: 100vh;
        overflow-y: auto;
        border: 1px solid #ddd;
        background-color: rgb(0, 0, 0);
        color: green;
        font-family: monospace;
        padding: 15px;
        word-wrap: break-word;
        overflow-wrap: break-word;

        p {
          margin-bottom: 10px;
        }
      }

      .container {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        gap: 5px;
        height: 100vh;
        flex-grow: 1;
      }

      canvas {
        border: 1px solid #ddd;
        width: 512px;
        height: 288px;
      }

      .userinfo {
        text-align: center;
        font-size: 20px;
        color: white;
        background-color: rgba(0, 0, 0, 0.5);
        font-family: monospace;
        padding: 5px;
      }
    </style>
  </head>
  <body>
    <div class="main">
      <div class="container">
        <% cameras.forEach(c => { %>
        <div>
          <canvas id="canvas<%= c.id %>"></canvas>
          <div class="userinfo" id="userinfo<%= c.id %>">&nbsp;</div>
        </div>
        <% }) %>
      </div>
      <div id="log-container"></div>
    </div>

    <script src="<%= scriptUrl %>"></script>

    <script>
      (async () => {
        const res = await fetch("/api/camera");
        if (res.statusText !== "OK") return;
        const cameras = await res.json();

        for (const camera of cameras) {
          await loadPlayer({
            url: `ws://<%=host%>/api/stream?ip_address=${camera.ip_address}`,
            canvas: document.getElementById(`canvas${camera.id}`),
            onDisconnect: () => console.log("Disconnected"),
            audio: false,
          });
        }
      })();

      function renderLog(log) {
        const logContainer = document.getElementById("log-container");
        const date = new Date(log.timestamp).toLocaleString("id-ID", {
          timeZone: "Asia/Jakarta",
        });

        logContainer.innerHTML += `<p>[${date}] [${log.level.toUpperCase()}] ${
          log.message
        }</p>`;

        logContainer.scrollTop = logContainer.scrollHeight;
      }

      const host = window.location.host.split(":")[0];
      const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
      const wsUrl = `${protocol}//${host}:8090`;
      const socket = new WebSocket(wsUrl);

      socket.onmessage = (event) => {
        const log = JSON.parse(event.data);

        if (log.message.includes("New notification")) {
          const prefixLength = "New notification: ".length;
          let data = log.message.slice(prefixLength);
          data = JSON.parse(data);
          const userInfo = document.getElementById(`userinfo${data.dev_id}`);

          if (userInfo) {
            userInfo.innerHTML = data.name;
            setTimeout(() => {
              userInfo.innerHTML = "&nbsp;";
            }, 10000);
          }
        }

        renderLog(log);
      };

      socket.onopen = () => {
        console.log("WebSocket connection established!!!");
      };

      socket.onclose = () => {
        console.log("WebSocket connection closed!!!");
      };

      socket.onerror = (error) => {
        console.error("WebSocket error:", error.message);
      };
    </script>
  </body>
</html>
